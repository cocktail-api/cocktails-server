/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.slevermann.cocktails.api;

import de.slevermann.cocktails.models.CreateIngredient;
import de.slevermann.cocktails.models.GetIngredient;
import de.slevermann.cocktails.models.IngredientType;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-04-16T17:30:10.709+02:00[Europe/Berlin]")
@Api(value = "ingredients", description = "the ingredients API")
public interface IngredientsApi {

    Logger log = LoggerFactory.getLogger(IngredientsApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @ApiOperation(value = "Create a new ingredient", nickname = "createNewIngredient", notes = "", response = GetIngredient.class, tags={ "ingredients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The created ingredient", response = GetIngredient.class),
        @ApiResponse(code = 400, message = "The ingredient was invalid") })
    @RequestMapping(value = "/ingredients",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<GetIngredient> createNewIngredient(@ApiParam(value = "The ingredient to create" ,required=true )  @Valid @RequestBody CreateIngredient body);


    @ApiOperation(value = "Get a single ingredient by its ID", nickname = "getIngredientById", notes = "", response = GetIngredient.class, tags={ "ingredients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully received ingredient", response = GetIngredient.class),
        @ApiResponse(code = 404, message = "Ingredient not found") })
    @RequestMapping(value = "/ingredients/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetIngredient> getIngredientById(@ApiParam(value = "",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get the available ingredient types", nickname = "getIngredientTypes", notes = "", response = IngredientType.class, responseContainer = "List", tags={ "ingredients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of ingredient types", response = IngredientType.class, responseContainer = "List") })
    @RequestMapping(value = "/ingredients/types",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<IngredientType>> getIngredientTypes();

}
