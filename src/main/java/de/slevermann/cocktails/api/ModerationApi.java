/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.slevermann.cocktails.api;

import de.slevermann.cocktails.dto.ErrorModel;
import de.slevermann.cocktails.dto.LocalizedIngredient;
import de.slevermann.cocktails.dto.Moderation;
import java.util.UUID;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-06-07T18:28:08.273184+02:00[Europe/Berlin]")
@Api(value = "moderation", description = "the moderation API")
public interface ModerationApi {

    Logger log = LoggerFactory.getLogger(ModerationApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @ApiOperation(value = "Get the moderation queue for ingredients", nickname = "getIngredientQueue", notes = "", response = LocalizedIngredient.class, responseContainer = "List", authorizations = {
        @Authorization(value = "oauth2", scopes = { 
            @AuthorizationScope(scope = "openid", description = "Default OpenID scope")
            })    }, tags={ "ingredients","moderation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = LocalizedIngredient.class, responseContainer = "List") })
    @RequestMapping(value = "/moderation/ingredients/queue/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<LocalizedIngredient>> getIngredientQueue();


    @ApiOperation(value = "Handle the moderation status of an ingredient", nickname = "moderateIngredient", notes = "", authorizations = {
        @Authorization(value = "oauth2", scopes = { 
            @AuthorizationScope(scope = "openid", description = "Default OpenID scope")
            })    }, tags={ "ingredients","moderation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Status set successfully"),
        @ApiResponse(code = 400, message = "Invalid moderation status", response = ErrorModel.class),
        @ApiResponse(code = 404, message = "Ingredient not found") })
    @RequestMapping(value = "/moderation/ingredients/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> moderateIngredient(@ApiParam(value = "",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody Moderation body);

}
